# src/main/resources/cosmos-queries.properties
cosmos.queries.premiumByPlanTypeTierAnalysis=SELECT p.planType,
        p.tierLevel,
        AVG(pp.basePremium * g.adjustmentFactor) AS avgAdjustedPremium,
        MIN(pp.basePremium * g.adjustmentFactor) AS minPremium,
        MAX(pp.basePremium * g.adjustmentFactor) AS maxPremium,
        COUNT(1) AS planCount
    FROM p
    JOIN pp IN p.planPricings
    JOIN g IN p.geographicPricings
    WHERE pp.ageBracket = '40-49'
      AND g.ratingArea = 12
      AND p.active = true
    GROUP BY p.planType, p.tierLevel
###       
# Limitations to Watch For/Cosmos DB Limitations to Address
#- Pagination behavior: DISTINCT is applied per page, not across the entire result set. So if you're using continuation tokens, you might see duplicates across pages.
#- Cross-partition queries: When querying across partitions, DISTINCT may return duplicates unless you handle deduplication in your application logic.
#- COUNT with DISTINCT: You can't directly use COUNT(DISTINCT c.property)\u2014it results in a syntax error. Instead, you can use a subquery like:
#- Use IS_DEFINED() if you want to check whether a property exists at all (even if it\u2019s not null).
#   SELECT c.id, (IS_DEFINED(c.amount) AND NOT IS_NULL(c.amount) ? c.amount : 0) AS safeAmount FROM c
#- ROUND(AVG(...)) syntax error: Cosmos DB doesn\u2019t support nesting aggregate functions like ROUND(AVG(...)). You\u2019ll need to compute the average first, then round it client-side.
#- LEFT JOIN is not supported: Cosmos DB only supports inner joins within a single document. You can\u2019t join across containers like in SQL Server or PostgreSQL.
#- Cross-container joins: Cosmos DB joins are scoped to a single document. Your joins across insurancePlans, coverageDetails, planPricings, and claimsData won\u2019t work unless these are nested arrays within a single document.
#- ORDER BY with GROUP BY: Cosmos DB doesn\u2019t support ORDER BY in queries that use GROUP BY.
#- \u274c Cross-container joins: Not supported. Joins must be within a single document.
#- \u274c Aliased joins (JOIN x ON y): Cosmos DB uses in-document joins like JOIN x IN c.array.
#- \u274c COUNT(DISTINCT): Cosmos DB doesn\u2019t support COUNT(DISTINCT ...) directly.
#- \u274c Computed expressions in aggregates: You can\u2019t do AVG(pp.basePremium * g.adjustmentFactor) directly.
#- COUNT(1) counts documents per group. If you truly need distinct p.ids, you\u2019ll need to deduplicate client-side.
#- You can\u2019t use ORDER BY with GROUP BY in Cosmos DB.
#- If planPricings or geographicPricings are not embedded, you\u2019ll need to denormalize your data model.
cosmos.queries.costVsCoverageAnalysis=SELECT p.id,
        p.planName,
        p.coverageDetails[0].deductibleIndividual,
        p.coverageDetails[0].oopMaxIndividual,
        p.planPricings[0].basePremium,
        (p.planPricings[0].basePremium * 12 + p.coverageDetails[0].deductibleIndividual) AS estimatedAnnualCost,
        AVG(cl.allowedAmount) AS avgClaimCost,
        COUNT(cl.id) AS claimCount
    FROM p
    JOIN cl IN p.claimsData
    WHERE p.planPricings[0].ageBracket = '30-39'
      AND p.tierLevel = 'Silver'
    GROUP BY 
        p.id, p.planName, 
        p.coverageDetails[0].deductibleIndividual, 
        p.coverageDetails[0].oopMaxIndividual, 
        p.planPricings[0].basePremium
### 
cosmos.queries.tobaccoSurchargeImpactAnalysis=SELECT p.id,
        p.planName,
        ic.companyName,
        pp.ageBracket,
        pp.basePremium AS nonTobaccoPremium,
        (pp.basePremium + pp.tobaccoSurcharge) AS tobaccoPremium,
        ROUND((pp.tobaccoSurcharge / pp.basePremium) * 100, 2) AS surchargePercentage,
        SUM(m.tobaccoUser = true ? 1 : 0) AS tobaccoUsers,
        SUM(m.tobaccoUser = false ? 1 : 0) AS nonTobaccoUsers
    FROM p
    JOIN pp IN p.planPricings
    JOIN ic IN p.insuranceCompanies
    JOIN m IN p.members
    WHERE pp.basePremium > 0  -- avoid divide-by-zero
    GROUP BY 
        p.id, p.planName, ic.companyName, pp.ageBracket, pp.basePremium, pp.tobaccoSurcharge
###       
#Cosmos DB Limitations to Address
#- \u274c No LEFT JOIN: Only inner joins within a single document are supported.
#- \u274c No FILTER in COUNT(): Conditional aggregation must use ternary logic.
#- \u274c No computed expressions in GROUP BY or ORDER BY: You can\u2019t group or sort by calculated fields like surchargePercentage.
#- \u274c No cross-container joins: All joined data must be embedded arrays inside the same document.
cosmos.queries.marketBenchmarkingAnalysis=SELECT ic.companyName,
        p.tierLevel,
        p.planType,
        AVG(pp.basePremium) AS avgBasePremium,
        AVG(pp.basePremium * g.adjustmentFactor) AS avgAdjustedPremium,
        ic.marketShare
    FROM p
    JOIN ic IN p.insuranceCompanies
    JOIN pp IN p.planPricings
    JOIN g IN p.geographicPricings
    WHERE pp.ageBracket = '40-49'
      AND g.ratingArea = 5
      AND p.active = true
    GROUP BY 
        ic.companyName, 
        p.tierLevel, 
        p.planType, 
        ic.marketShare
###       
cosmos.queries.premiumVsAgeAnalysis=SELECT pp.ageBracket,
        AVG(pp.basePremium) AS avgPremium,
        pp.ageSortOrder
    FROM pp
    WHERE pp.ageBracket IN ('0-20', '21-29', '30-39', '40-49', '50-59', '60+')
    GROUP BY pp.ageBracket, pp.ageSortOrder
###  
#Unsupported Features in Cosmos DB SQL API
#- LAG() window function: Not available.
#- CASE inside subqueries: Cosmos DB doesn\u2019t support scalar subqueries or complex expressions like this.
#- JOIN on subqueries: Only self-joins within a document are allowed.
#- ORDER BY with GROUP BY: Cosmos DB doesn\u2019t allow sorting on computed fields in grouped queries.
#\u2705 Cosmos-Compatible Strategy
#To replicate this logic, you\u2019ll need to:
#- Precompute ageSortOrder and embed it in each planPricings document.
#- Run a grouped query to get average premiums per age bracket.
#- Compute premiumIncrease and percentIncrease client-side by iterating over sorted results.
###  
cosmos.queries.riskPoolAnalysis=SELECT p.planName,
        COUNT(m.id) AS enrolledMembers,
        SUM(pp.basePremium * 12) AS annualPremiumVolume,
        SUM(cl.allowedAmount) AS annualClaimsCosts
    FROM p
    JOIN m IN p.members
    JOIN pp IN p.planPricings
    JOIN cl IN p.claimsData
    WHERE pp.ageBracket = m.ageBracket
      AND cl.serviceDate >= '2023-01-01' AND cl.serviceDate <= '2023-12-31'
      AND p.active = true
    GROUP BY p.planName
cosmos.queries.networkAdequacyImpactAnalysis=SELECT p.id,
        p.planName,
        SUM(pr.networkStatus = 'In-Network' ? 1 : 0) AS inNetworkProviders,
        SUM(pr.networkStatus = 'In-Network' ? (cl.id != null ? 1 : 0) : 0) AS inNetworkClaims,
        SUM(pr.networkStatus = 'Out-of-Network' ? (cl.id != null ? 1 : 0) : 0) AS outOfNetworkClaims,
        AVG(pr.networkStatus = 'In-Network' ? cl.allowedAmount : null) AS avgInNetworkCost,
        AVG(pr.networkStatus = 'Out-of-Network' ? cl.allowedAmount : null) AS avgOutOfNetworkCost
    FROM p
    JOIN cl IN p.claimsData
    JOIN pr IN p.insuranceProviders
    GROUP BY p.id, p.planName
# Limitations to Watch For/Cosmos DB Limitations to Address
#- Pagination behavior: DISTINCT is applied per page, not across the entire result set. So if you're using continuation tokens, you might see duplicates across pages.
#- Cross-partition queries: When querying across partitions, DISTINCT may return duplicates unless you handle deduplication in your application logic.
#- COUNT with DISTINCT: You can't directly use COUNT(DISTINCT c.property)\u2014it results in a syntax error. Instead, you can use a subquery like:
#- Use IS_DEFINED() if you want to check whether a property exists at all (even if it\u2019s not null).
#   SELECT c.id, (IS_DEFINED(c.amount) AND NOT IS_NULL(c.amount) ? c.amount : 0) AS safeAmount FROM c
#- ROUND(AVG(...)) syntax error: Cosmos DB doesn\u2019t support nesting aggregate functions like ROUND(AVG(...)). You\u2019ll need to compute the average first, then round it client-side.
#- LEFT JOIN is not supported: Cosmos DB only supports inner joins within a single document. You can\u2019t join across containers like in SQL Server or PostgreSQL.
#- Cross-container joins: Cosmos DB joins are scoped to a single document. Your joins across insurancePlans, coverageDetails, planPricings, and claimsData won\u2019t work unless these are nested arrays within a single document.
#- ORDER BY with GROUP BY: Cosmos DB doesn\u2019t support ORDER BY in queries that use GROUP BY.
#- \u274c Cross-container joins: Not supported. Joins must be within a single document.
#- \u274c Aliased joins (JOIN x ON y): Cosmos DB uses in-document joins like JOIN x IN c.array.
#- \u274c COUNT(DISTINCT): Cosmos DB doesn\u2019t support COUNT(DISTINCT ...) directly.
#- \u274c Computed expressions in aggregates: You can\u2019t do AVG(pp.basePremium * g.adjustmentFactor) directly.
#- COUNT(1) counts documents per group. If you truly need distinct p.ids, you\u2019ll need to deduplicate client-side.
#- You can\u2019t use ORDER BY with GROUP BY in Cosmos DB.
#- If planPricings or geographicPricings are not embedded, you\u2019ll need to denormalize your data model.
#- You\u2019ll need to sort by surchargePercentage client-side, since Cosmos DB doesn\u2019t allow ORDER BY on computed fields in GROUP BY queries.
#- If members is missing for some plans, you\u2019ll need to handle that in your data model or use a stored procedure to simulate a left join.
#- You can wrap this into a script that runs across multiple containers if needed.
# Cosmos DB Constraints to Address
#- \u274c No cross-container joins: All joins must be within a single document.
#- \u274c No ROUND(AVG(...)): You can\u2019t nest aggregate functions.
#- \u274c No ORDER BY on computed fields in GROUP BY queries.
#- \u274c No alias-based joins (JOIN x ON y): Cosmos DB uses JOIN x IN c.array.
#Unsupported Features in Cosmos DB SQL API
#- LAG() window function: Not available.
#- CASE inside subqueries: Cosmos DB doesn\u2019t support scalar subqueries or complex expressions like this.
#- JOIN on subqueries: Only self-joins within a document are allowed.
#- ORDER BY with GROUP BY: Cosmos DB doesn\u2019t allow sorting on computed fields in grouped queries.
#- Cosmos DB treats null in AVG() as a skip, so ternary logic works to simulate filtering.
#- You\u2019ll need to round values client-side in your Spring Boot reactive stream.
#- If insuranceProviders aren\u2019t embedded, you\u2019ll need to denormalize or use a stored procedure.



